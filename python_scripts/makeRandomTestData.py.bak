import random, screed, aabpPyLib

def outputFastaSeq(filename, identifier, seq):
    outfile = open(filename, 'a')
    identifier = identifier.strip('>')
    outfile.write('>' + identifier + '\n')
    while len(seq) > 60:
        outfile.write(seq[0:60] + '\n')
        seq = seq[60:]
    outfile.write(seq + '\n')
    outfile.close()
    return 0

def outputFastqSeq(filename, identifier, seq):
    outfile = open(filename, 'a')
    identifier = '@HWUSI-EAS1599:79:709W9AAXX:1:1:2039:936 1:N:0:GNCTAC'
    outfile.write(identifier + '\n')
    s = len(seq) + 1
    q = '#'*s
    outfile.write('N' + seq + '\n')
    outfile.write('+' + '\n')
    outfile.write(q + '\n')
    return 0

def inputFastaSeq(filename):
    fastas = {}
    for newString in open(filename):
        if newString[0] == '>':
            currId = newString.rstrip()
            currId = currId[1:]
            fastas[currId] = ''
        else:
            fastas[currId] = fastas[currId] + newString.rstrip()
    return fastas

def checkForFasta(filename):
    try: 
        infile = open(filename, 'r')
    except:
        return 0
    else:
        return 1

def outputGeneCoverage(filename, identifier, type, coverage):
    outfile = open(filename, 'a')
    outfile.write(identifier + '\t' + type + '\t' + str(coverage) + '\n')
    return 0

def countKmersSeq(seq, kLength):
    kmers = {}
    i = 0
    while i + kLength <= len(seq):
        newWord = seq[i:i + kLength]
        if kmers.has_key(newWord):
            kmers[newWord] += 1
        else:
            kmers[newWord] = 1
        i += 1
    return kmers

def countKmersFile(filename, kLength):
    kmers = {}
    fasta = {}
    identifier = 0
    fasta = inputFastaSeq(filename)
    for entry in fasta:        
            k = len(fasta[entry])
            i = 0
            while i + kLength <= k:
                newWord = fasta[entry][i:i + kLength]
                if kmers.has_key(newWord):
                    kmers[newWord] += 1
                elif kmers.has_key(aabpPyLib.reverseComplement(newWord, 'DNA')):
                    kmers[aabpPyLib.reverseComplement(newWord, 'DNA')] += 1
                else:
                    kmers[newWord] = 1
                i += 1
    
    return kmers

def countKmersInitializedFile(filename, kLength, kmers):
    fasta = {}
    fasta = inputFastaSeq(filename)
    for entry in fasta:
        kmers = countKmersInitialized(fasta[entry], kLength, kmers)
    return kmers

def countKmersInitialized(seq, kLength, kmers):
    k = len(seq)
#    print seq
    i = 0
    while i + kLength <= k:
        newWord = seq[i:i + kLength]
#        print newWord
        if kmers.has_key(newWord):
            kmers[newWord] += 1
#            print 'Found key forward'
        elif kmers.has_key(aabpPyLib.reverseComplement(newWord, 'DNA')):
            kmers[aabpPyLib.reverseComplement(newWord, 'DNA')] += 1
#            print 'Found key reverse'
        else:
#            print 'Key should have been found, but was not'
            pass
        i += 1
    return kmers

def zeroInitializedDictionary(x):
    for key in x:
        x[key] = 0
    return x

def outputDictionaryContent(filename, x):
    outfile = open(filename, 'a')
    for key in sorted(x):
        outfile.write(key + '\t' + str(x[key]) + '\n')
    return len(x)

def outputDictionaryContentNoKey(filename, x):
    outfile = open(filename, 'a')
    for key in sorted(x):
        outfile.write(str(x[key]) + '\t')
    return len(x)

def inputDictionaryContent(filename, x):
    for newString in open(filename, 'r'):
        newString = newString.rstrip()
        parts = newString.split('\t')
        x[parts[0]] = parts[1]
    return x

def makeKmerCountData(seqLength, alpha):
    data = ''
    if alpha == 'default':
        alphabet = {0:'A', 1:'C', 2:'G', 3:'T'}
        for i in range(0, seqLength):
            data = data + alphabet[random.choice(range(0, 4))]
    elif alpha == 'chicken':
        data = makeChickenKmerCountData(seqLength)
    return data

def makeChickenKmerCountData(seqLength):
    data = ''
    alphabet = {0:'A', 1:'C', 2:'G', 3:'T'}
    for i in range(0, seqLength):
        newNucNum =random.randint(0, 100)
        if i % 3 == 0:
            if newNucNum in range(0, 22):
                newNuc = 'T'
            elif newNucNum in range(22, 45):
                newNuc = 'C'
            elif newNucNum in range(45, 75):
                newNuc = 'A'
            else:
                newNuc = 'G'
        elif i % 3 == 1:
            if newNucNum in range(0, 30):
                newNuc = 'T'
            elif newNucNum in range(30, 49):
                newNuc = 'C'
            elif newNucNum in range(49, 81):
                newNuc = 'A'
            else:
                newNuc = 'G'
        elif i % 3 == 2:
            if data[-2] == 'T' and data[-1] == 'T':
                if newNucNum in range(0, 32):
                    newNuc = 'T'
                elif newNucNum in range(32, 60):
                    newNuc = 'C'
                elif newNucNum in range(60, 80):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'T' and data[-1] == 'C':
                if newNucNum in range(0, 33):
                    newNuc = 'T'
                elif newNucNum in range(33, 66):
                    newNuc = 'C'
                elif newNucNum in range(66, 90):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'T' and data[-1] == 'A':
                if newNucNum in range(0, 53):
                    newNuc = 'T'
                elif newNucNum in range(53, 99):
                    newNuc = 'C'
                elif newNucNum in range(99, 100):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'T' and data[-1] == 'G':
                if newNucNum in range(0, 33):
                    newNuc = 'T'
                elif newNucNum in range(33, 74):
                    newNuc = 'C'
                else:
                    newNuc = 'G'
            elif data[-2] == 'C' and data[-1] == 'T':
                if newNucNum in range(0, 30):
                    newNuc = 'T'
                elif newNucNum in range(30, 44):
                    newNuc = 'C'
                elif newNucNum in range(44, 57):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'C' and data[-1] == 'C':
                if newNucNum in range(0, 36):
                    newNuc = 'T'
                elif newNucNum in range(36, 52):
                    newNuc = 'C'
                elif newNucNum in range(52, 91):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'C' and data[-1] == 'A':
                if newNucNum in range(0, 21):
                    newNuc = 'T'
                elif newNucNum in range(21, 37):
                    newNuc = 'C'
                elif newNucNum in range(37, 53):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'C' and data[-1] == 'G':
                if newNucNum in range(0, 30):
                    newNuc = 'T'
                elif newNucNum in range(30, 53):
                    newNuc = 'C'
                elif newNucNum in range(53, 71):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'A' and data[-1] == 'T':
                if newNucNum in range(0, 22):
                    newNuc = 'T'
                elif newNucNum in range(22, 50):
                    newNuc = 'C'
                elif newNucNum in range(50, 75):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'A' and data[-1] == 'C':
                if newNucNum in range(0, 43):
                    newNuc = 'T'
                elif newNucNum in range(43, 69):
                    newNuc = 'C'
                elif newNucNum in range(69, 88):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'A' and data[-1] == 'A':
                if newNucNum in range(0, 15):
                    newNuc = 'T'
                elif newNucNum in range(15, 33):
                    newNuc = 'C'
                elif newNucNum in range(33, 68):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'A' and data[-1] == 'G':
                if newNucNum in range(0, 18):
                    newNuc = 'T'
                elif newNucNum in range(18, 41):
                    newNuc = 'C'
                elif newNucNum in range(41, 68):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'G' and data[-1] == 'T':
                if newNucNum in range(0, 33):
                    newNuc = 'T'
                elif newNucNum in range(33, 49):
                    newNuc = 'C'
                elif newNucNum in range(49, 70):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'G' and data[-1] == 'C':
                if newNucNum in range(0, 28):
                    newNuc = 'T'
                elif newNucNum in range(28, 48):
                    newNuc = 'C'
                elif newNucNum in range(48, 92):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'G' and data[-1] == 'A':
                if newNucNum in range(0, 19):
                    newNuc = 'T'
                elif newNucNum in range(19, 31):
                    newNuc = 'C'
                elif newNucNum in range(31, 63):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
            elif data[-2] == 'G' and data[-1] == 'G':
                if newNucNum in range(0, 33):
                    newNuc = 'T'
                elif newNucNum in range(33, 52):
                    newNuc = 'C'
                elif newNucNum in range(52, 73):
                    newNuc = 'A'
                else:
                    newNuc = 'G'
        else:
            print 'This should never print!'
        data = data + newNuc
    return data

def makeSingleKmerCountData(kLength, seqLength, Ns):
    data = ''
    if Ns:
        alphabet = {0:'A', 1:'C', 2:'G', 3:'T', 4:'N'}
    else:
        alphabet = {0:'A', 1:'C', 2:'G', 3:'T'}
    while len(data) < seqLength:
        if len(data) in range(0, kLength):
            data = data + alphabet[random.randint(0,len(alphabet)-1)]
        else:
            newNuc = alphabet[random.randint(0,len(alphabet)-1)]
            if data[-1 * kLength - 1: -1] + newNuc not in data and aabpPyLib.reverseComplement(data[-1 * kLength - 1: -1] + newNuc, 'DNA') not in data:
                data = data + newNuc
                print data[-1 * kLength: -1], len(data)
    return data

def makeSingleKmerPlusOneCountData(kLength, seqLength, repSeq, Ns):
    data = repSeq
    if Ns:
        alphabet = {0:'A', 1:'C', 2:'G', 3:'T', 4:'N'}
    else:
        alphabet = {0:'A', 1:'C', 2:'G', 3:'T'}
    while len(data) < seqLength:
        if len(data) in range(0, kLength):
            data = data + alphabet[random.randint(0, len(alphabet)-1)]
        else:
            newNuc = alphabet[random.randint(0, len(alphabet)-1)]
            if data[-1 * kLength -1: -1] + newNuc not in data and aabpPyLib.reverseComplement(data[-1 * kLength - 1: -1] + newNuc, 'DNA') not in data:
                data = data + newNuc
    return data
    
def makeIsoform(kLength, seqLength, seqPortion, seqOriginal):
    data = seqOriginal
    alphabet = {0:'A', 1:'C', 2:'G', 3:'T'}
    while data == seqOriginal:
        data = seqPortion
        while len(data) < seqLength:
            if len(data) < seqLength:
                data = data + alphabet[random.randint(0, len(alphabet)-1)]
            else:
                newNuc = alphabet[random.randint(0, len(alphabet)-1)]
                if data[-1 * kLength -1: -1] + newNuc not in data and aabpPyLib.reverseComplement(data[-1 * kLength - 1: -1] + newNuc, 'DNA') not in data:
                    data = data + newNuc
    return data

def makeIsoformTruncation(identifier, seqOriginal, newLength):
    if newLength == 0 and len(seqOriginal) > 100:
        newLength = random.choice(range(100, len(seqOriginal)))
    seqTrunc = seqOriginal[0:newLength]
    identifierNew = identifier + '_Truncation_' + str(len(seqOriginal) - newLength)
    return identifierNew, seqTrunc

def makeIsoformExtension(identifier, seqOriginal, newLength, seqEnd):
    if newLength == 0 and len(seqOriginal) < 5000:
        newLength = random.randint(0, 5001 - len(seqOriginal))
    if seqEnd == '':
        alphabet = {0:'A', 1:'C', 2:'G', 3:'T'}
        while len(seqEnd) < newLength:
            seqEnd += alphabet[random.randint(0, len(alphabet)-1)]
    seqExt = seqOriginal + seqEnd
    identifierNew = identifier + '_Extension_' + str(len(seqEnd))
    return identifierNew, seqExt

def makeIsoformInsertion(identifier, seqOriginal, insertPosition, seqIn):
    if insertPosition == -1:
        insertPosition = random.randint(0, len(seqOriginal) - 1)
    if len(seqIn) == 0:
        insertLength = random.randint(1, 5001 - len(seqOriginal))
        alphabet = {0:'A', 1:'C', 2:'G', 3:'T'}
        while len(seqIn) < insertLength:
            seqIn += alphabet[random.randint(0, len(alphabet)-1)]
    seqIns = seqOriginal[0:insertPosition] + seqIn + seqOriginal[insertPosition:len(seqOriginal)]
    identifierNew = identifier + '_Insertion_Pos_' + str(insertPosition) + '_Size_' + str(len(seqIn))
    return identifierNew, seqIns

def makeIsoformDeletion(identifier, seqOriginal, deletePosition, deleteLength):
    if deleteLength == 0:
        deleteLength = random.randint(1, len(seqOriginal) - 1)
    if deletePosition == -1:
        deletePosition = random.randint(0, len(seqOriginal) - deleteLength)
    seqDel = seqOriginal[0:deletePosition] + seqOriginal[deletePosition+deleteLength: len(seqOriginal)]
    identifierNew = identifier + '_Deletion_Pos_' + str(deletePosition) + '_Size_' + str(deleteLength)
    return identifierNew, seqDel

def makeIsoformSubstitution(identifier, seqOriginal, subPosition, seqSub):
    if len(seqSub) == 0:
        subLength = random.randint(1, len(seqOriginal)-1)
        alphabet = {0:'A', 1:'C', 2:'G', 3:'T'}
        while len(seqSub) < subLength:
            seqSub += alphabet[random.randint(0, len(alphabet)-1)]
    subLength = len(seqSub)
    if subPosition == -1:
        subPosition = random.randint(1, len(seqOriginal) - subLength)
    seqSubs = seqOriginal[0:subPosition] + seqSub + seqOriginal[subPosition+subLength: len(seqOriginal)]
    identifierNew = identifier + '_Substitution_Pos_' + str(subPosition) + '_Size_' + str(len(seqSub))
    return identifierNew, seqSubs

def makeIsoformSnps(identifier, seqOriginal, frequency):
    if frequency == 0:
        frequency = random.randint(1, 5)
    identifierNew = identifier + '_Snps_Freq_' + str(frequency)
    seqSnp = addSeqErrors(seqOriginal, frequency)
    return identifierNew, seqSnp

def generateIsoforms(identifier, seqOriginal, typeIsoform, option1, option2, option3):
    newSeq = seqOriginal
    while newSeq == seqOriginal:
        if typeIsoform == 'random':
            options = {0:'truncation', 1:'extension', 2:'insertion', 3:'deletion', 4:'substitution', 5:'snps', 6:'truncationSnps', 7:'extensionSnps', 8:'insertionSnps', 9:'deletionSnps', 10:'substitutionSnps', 11:''}
#            typeIsoform = random.choice('truncation', 'extension', 'insertion', 'deletion', 'substitution', 'snps', 'truncationSnps', 'extensionSnps', 'insertionSnps', 'deletionSnps', 'substitutionSnps')
            choice = random.randint(1, 11)
            if choice == 1:
                typeIsoform = 'truncation'
                option1 = 0
            if choice == 2:
                typeIsoform = 'truncationSnps'
                option1 = 0
                option3 = 0
            if choice == 3:
                typeIsoform = 'extension'
                option1 = 0
                option2 = ''
            if choice == 4:
                typeIsoform = 'extensionSnps'
                option1 = 0
                option2 = ''
                option3 = 0
            if choice == 5:
                typeIsoform = 'insertion'
                option1 = -1
                option2 = ''
            if choice == 6:
                typeIsoform = 'insertionSnps'
                option1 = -1
                option2 = ''
                option3 = 0
            if choice == 7:
                typeIsoform = 'deletion'
                option1 = -1
                option2 = 0
            if choice == 8:
                typeIsoform = 'deletionSnps'
                option1 = -1
                option2 = 0
                option3 = 0
            if choice == 9:
                typeIsoform = 'substitution'
                option1 = -1
                option2 = ''
            if choice == 10:
                typeIsoform = 'substitutionSnps'
                option1 = -1
                option2 = ''
                option3 = 0
            if choice == 11:
                typeIsoform = 'snps'
                option3 = 0
        if typeIsoform == 'truncation':
             newId, newSeq = makeIsoformTruncation(identifier, seqOriginal, option1)
        if typeIsoform == 'truncationSnps':
             tmpId, tmpSeq = makeIsoformTruncation(identifier, seqOriginal, option1)
             newId, newSeq = makeIsoformSnps(tmpId, tmpSeq, option3)
        if typeIsoform == 'extension':
             newId, newSeq = makeIsoformExtension(identifier, seqOriginal, option1, option2)
        if typeIsoform == 'extensionSnps':
             tmpId, tmpSeq = makeIsoformExtension(identifier, seqOriginal, option1, option2)
             newId, newSeq = makeIsoformSnps(tmpId, tmpSeq, option3)
        if typeIsoform == 'insertion':
             newId, newSeq = makeIsoformInsertion(identifier, seqOriginal, option1, option2)
        if typeIsoform == 'insertionSnps':
             tmpId, tmpSeq = makeIsoformInsertion(identifier, seqOriginal, option1, option2)
             newId, newSeq = makeIsoformSnps(tmpId, tmpSeq, option3)
        if typeIsoform == 'deletion':
             newId, newSeq = makeIsoformDeletion(identifier, seqOriginal, option1, option2)
        if typeIsoform == 'deletionSnps':
             tmpId, tmpSeq = makeIsoformDeletion(identifier, seqOriginal, option1, option2)
             newId, newSeq = makeIsoformSnps(tmpId, tmpSeq, option3)
        if typeIsoform == 'substitution':
             newId, newSeq = makeIsoformSubstitution(identifier, seqOriginal, option1, option2)
        if typeIsoform == 'substitutionSnps':
             tmpId, tmpSeq = makeIsoformSubstitution(identifier, seqOriginal, option1, option2)
             newId, newSeq = makeIsoformSnps(tmpId, tmpSeq, option3)
        if typeIsoform == 'snps':
             newId, newSeq = makeIsoformSnps(identifier, seqOriginal, option3)

    return newId, newSeq

def addSeqErrors(read, errors):
    temp = ''
    for errorCounter in range(0, len(read)):
        if random.randint(1, 100) <= errors:
            seq= ['A', 'C', 'G', 'T']
            nuc = read[errorCounter]
            seq.remove(nuc)
            nuc = random.choice(seq)
            temp += nuc
        else:
            temp += read[errorCounter]
    return temp

def addSeqErrorsId(read, identifier, errors):
    temp = ''
    for errorCounter in range(0, len(read)):
        if random.randint(1, 100) <= errors:
            seq= ['A', 'C', 'G', 'T']
            nuc = read[errorCounter]
            if nuc != 'N':
                seq.remove(nuc)
            nuc = random.choice(seq)
            temp += nuc
            identifier = identifier + '_' + str(errorCounter)
        else:
            temp += read[errorCounter]
    return temp, identifier

def addNs(seq, freq):
    for counter in range(0, len(seq)):
        if random.randint(1, 101) <= freq:
            temp = seq[:counter] + 'N' + seq[counter+1:]
            seq = temp
    return seq
            

def makeRandomlyPlacedReads(gene, identifier, readLength, numReads, filenameFasta, filenameCoverage, errors, Ns):
    coverageReq = float(len(gene)) / float(readLength) * float(numReads)
    if len(gene) >= readLength:
#        print coverageReq
        for i in range(0, int(coverageReq)):
#        if len(gene) >= readLength:
            position = random.randint(0,len(gene)-readLength)
            read = gene[position:position + readLength]
            identifier1 = identifier + 'Count' + str(i) + 'Begin' + str(position) + 'End' + str(position + readLength - 1)
            if errors:
                read, identifier1 = addSeqErrorsId(read, identifier1, errors)
            if Ns:
                read = addNs(read, Ns)
#            identifier1 = identifier + 'Count' + str(i) + 'Begin' + str(position) + 'End' + str(position + readLength - 1)
            a = outputFastaSeq(filenameFasta, identifier1, read)
    else:
        pass
    b = outputGeneCoverage(filenameCoverage, identifier, 'Random Placement - Number of Reads' + ':' + str(coverageReq), numReads)
    return 1

def makeRandomlyPlacedPairedEndReads(gene, identifier, readLengthSide, insertSize, numReads, filenameFasta1, filenameFasta2, filenameCoverage, errors, Ns):
    totalReadLength = 2 * float(readLengthSide) + float(insertSize)
    coverageReq = float(len(gene)) / float(totalReadLength) * float(numReads)
    if len(gene) >= totalReadLength:
        for i in range(0, coverageReq):
#        if len(gene) >= totalReadLength:
            position = random.randint(0,len(gene)-totalReadLength)
            read = gene[position:position + totalReadLength]
            if errors:
                read = addSeqErrors(read, errors)
            if Ns:
                read = addNs(read, Ns)
            identifier1 = identifier + 'Count' + str(i) + 'Begin' + str(position) + 'End' + str(position + (2 * readLengthSide) + insertSize - 1)
            a = outputFastaSeq(filenameFasta1, identifier1 + '\t1', read[:readLengthSide])
            identifier2 = identifier + 'Count' + str(i) + 'Begin' + str(position + readLengthSide + insertSize) + 'End' + str(position + (2 * readLengthSide) + insertSize - 1)
            a = outputFastaSeq(filenameFasta2, identifier1 + '\t2', read[-1*readLengthSide: -1])
    else:
        pass
    b = outputGeneCoverage(filenameCoverage, identifier, 'Random Placement-Number of Reads' + ':' + str(coverageReq), numReads)
    return 1


def makeUniformReads(gene, identifier, readLength, numReads, filenameFasta, filenameCoverage, errors, Ns):
    for i in range(0, numReads):
        position = 0
        while position + readLength <= len(gene):
            read = gene[position:position+readLength]
            identifier1 = identifier + 'Count' + str(i) + 'Begin' + str(position) + 'End' + str(position+readLength - 1)
            if errors:
                read = addSeqErrors(read, errors)
            if Ns:
                read = addNs(read, errors)
            a = outputFastaSeq(filenameFasta, identifier1, read)
            position += readLength
    b = outputGeneCoverage(filenameCoverage, identifier, 'Uniform Placement - Number of Passes', numReads)
    return 1

def makeUnevenReads(seq, identifier, readLength, numReads, skips, filenameFasta, filenameCoverage, errors, Ns):
#    print seq
    for i in range(0, numReads):
        position = random.randint(0, skips)
        while position + readLength <= len(seq):
            read = seq[position:position+readLength]
            identifier1 = identifier + 'Count' + str(i) + 'Begin' + str(position) + 'End' + str(position+readLength - 1)
            if errors:
                read = addSeqErrors(read, errors)
            if Ns:
                read = addNs(read, errors)
            a = outputFastaSeq(filenameFasta, identifier1, read)
            position = position + readLength + random.randint(0, skips)
    b = outputGeneCoverage(filenameCoverage, identifier, 'Uneven Placement - Number of Passes', numReads)
    return 1

